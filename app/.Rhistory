filter(
primary_type %in%
c('THEFT',
'ASSAULT',
'NARCOTICS',
'CRIMINAL TRESPASS',
'WEAPONS VIOLATION',
'PUBLIC PEACE VIOLATION')) %>%
# Generate categorical variable for chosen types
mutate(
crime_type =
ifelse(primary_type == "THEFT",             1,
ifelse(primary_type == "ASSAULT",           2,
ifelse(primary_type == "NARCOTICS",         3,
ifelse(primary_type == "CRIMINAL TRESPASS", 4,
ifelse(primary_type == "WEAPONS VIOLATION", 5, 6)))))
)
View(df)
df   = data.frame(jsonlite::fromJSON(json))
# Data manipulation
df =
df %>%
# Choosing variables of interest
select(date,
primary_type,
location_description,
arrest, domestic,
beat, district,
latitude, longitude) %>%
# District as numeric
# `lon` and `lat` as numeric
# `date` as datetime
# Create month, day and hour of the day
mutate(district  = as.numeric(district),
latitude  = as.numeric(latitude),
longitude = as.numeric(longitude),
date      = as_datetime(date),
month     = month(date),
day       = day(date),
hour      = hour(date)) %>%
# Select primary type of crimes for maps
filter(
primary_type %in%
c('THEFT',
'ASSAULT',
'NARCOTICS',
'CRIMINAL TRESPASS',
'WEAPONS VIOLATION',
'PUBLIC PEACE VIOLATION')) %>%
# Generate categorical variable for chosen types
mutate(
crime_type =
ifelse(primary_type == "THEFT",             1,
ifelse(primary_type == "ASSAULT",           2,
ifelse(primary_type == "NARCOTICS",         3,
ifelse(primary_type == "CRIMINAL TRESPASS", 4,
ifelse(primary_type == "WEAPONS VIOLATION", 5, 6)))))
)
df() %>% plot_ly(x=~ hour, type = "hist")
df() %>% plot_ly(x= hour, type = "hist")
df() %>% plot_ly(x=~ hour, type = "histogram")
df %>% plot_ly(x=~ hour, type = "histogram")
length(unique(df$primary_type))
df() %>% plot_ly(x=~ day, type = "histogram")
df %>% plot_ly(x=~ day, type = "histogram")
df %>% plot_ly(x=~ hour, type = "histogram", alpha = 0.6)
df %>% plot_ly(x=~ hour, type = "histogram", alpha = 0.6, color = "#AE4343")
df %>% plot_ly(x=~ hour, type = "histogram", alpha = 0.6, colors = "#AE4343")
df %>% plot_ly(x=~ hour, type = "histogram", alpha = 0.6, color = I("#AE4343"))
df %>% plot_ly(x=~ hour, type = "histogram", alpha = 0.6, color = viridis::cividis(10))
df %>% plot_ly(x=~ hour, type = "histogram", alpha = 0.6, color = viridis::cividis(467))
df %>% plot_ly(x=~ hour, type = "histogram", alpha = 0.6, color = I(viridis::cividis(10)))
df %>% plot_ly(x=~ hour, type = "histogram", alpha = 0.6, colors = viridis::cividis(467))
df %>% plot_ly(x=~ hour, type = "histogram", alpha = 0.6, marker = list(color = colors = viridis::cividis(10)))
df %>% plot_ly(x=~ hour, type = "histogram", alpha = 0.6, marker = list(color = viridis::cividis(10)))
df %>% plot_ly(x=~ hour, type = "histogram", alpha = 0.6, marker = list(color = viridis::cividis(10, direction = -1)))
df %>% plot_ly(x=~ hour, type = "histogram", alpha = 0.6, marker = list(color = viridis::cividis(10, direction = 1)))
df %>% plot_ly(x=~ hour, type = "histogram", alpha = 0.6, marker = list(color = viridis::cividis(5)))
df %>% plot_ly(x=~ hour, type = "histogram", alpha = 0.6, marker = list(color = viridis::cividis(20)))
df %>% plot_ly(x=~ hour, type = "histogram", alpha = 0.6, marker = list(color = viridis::cividis(30)))
df %>% plot_ly(x=~ hour, type = "histogram", alpha = 0.6, marker = list(color = viridis::cividis(40)))
df %>% plot_ly(x=~ hour, type = "histogram", alpha = 0.6, marker = list(color = viridis::cividis(30)))
df %>% plot_ly(x=~ hour, type = "histogram", alpha = 0.6, marker = list(color = viridis::magma(30)))
df %>% plot_ly(x=~ hour, type = "histogram", alpha = 0.6, marker = list(color = viridis::inferno(30)))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df %>% plot_ly(x =~ hour, mode = 'lines', fill = 'tozeroy')
df %>% plot_ly() %>% add_trace(x =~ hour, mode = 'lines', fill = 'tozeroy')
density(df$hour)
density(df$hour) %>% plot_ly(x =~ .x, y =~ .y, type = 'scatter', mode = 'lines', fill = 'tozeroy')
str(density(df$hour))
density(df$hour)
a = density(df$hour)
density(df$hour)['x']
density(df$hour) %>% plot_ly(x =~ .['x'], y =~ .['y'], type = 'scatter', mode = 'lines', fill = 'tozeroy')
density(df$hour) %>% plot_ly(x =~ x, y =~ y, type = 'scatter', mode = 'lines', fill = 'tozeroy')
desnity(df$hour) %>% as.data.frame()
density(df$hour) %>% as.data.frame()
density(df$hour) %>% select(x,y) %>% as.data.frame()
a
a %>% unlist()
a
a[1]
density(df$hour) %>% select(.[1],.[2]) %>% as.data.frame()
density(df$hour) %>% select(.[1],.[2])
density(df$hour).[1]
density(df$hour)[1]
typeof(density(df$hour)[1])
unlis(density(df$hour)[1])
unlist(density(df$hour)[1])
plot_ly(x =~ a$x, y =~ a$y, type = 'scatter', mode = 'lines', fill = 'tozeroy')
plot_ly(x = df$hour, type = 'histogram')
density(df$hour, from = 0)
a = density(df$hour, from = 0)
plot_ly(x =~ a$x, y =~ a$y, type = 'scatter', mode = 'lines', fill = 'tozeroy')
runApp()
df %>% plot_ly(x =~ hour, type = 'histogram')
plot_ly(data = df, x =~ hour, type = 'histogram')
runApp()
plot_ly(alpha = 0.6) %>% add_histogram(data = df, x =~ hour, type = 'histogram')
plot_ly(alpha = 0.6) %>% add_histogram(data = df, x =~ hour) %>% add_histogram(data = df %>% select(crime_type == 1), x=~ hour)
plot_ly(alpha = 0.6) %>% add_histogram(data = df, x =~ hour) %>% add_histogram(data = df[df$crime_type ==1,], x=~ hour)
plot_ly(alpha = 0.6) %>% add_histogram(data = df, x =~ hour) %>% add_histogram(data = df[df$crime_type ==1,], x=~ hour) %>% layout(barmode = 'overlay')
plot_ly(alpha = 0.6) %>% add_histogram(data = df, x =~ hour) %>% add_histogram(data = df[df$crime_type ==2,], x=~ hour) %>% layout(barmode = 'overlay')
plot_ly(alpha = 0.6) %>% add_histogram(data = df, x =~ hour) %>% add_histogram(data = df[df$crime_type ==3,], x=~ hour) %>% layout(barmode = 'overlay')
plot_ly(alpha = 0.6) %>% add_histogram(data = df, x =~ hour) %>% add_histogram(data = df[df$crime_type ==4,], x=~ hour) %>% layout(barmode = 'overlay')
plot_ly(alpha = 0.6) %>% add_histogram(data = df, x =~ hour) %>% add_histogram(data = df[df$crime_type ==5,], x=~ hour) %>% layout(barmode = 'overlay')
runApp()
runApp()
unique(df[df$crime_type == 1, ]$primary_type)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(df)
unique(df$location_description)
unique(df$location_description[df$crime_type == 1])
table(df$location_description, df$primary_type)
sort(table(df$location_description, df$primary_type))
sort(table(df$location_description))
data.frame(sort(table(df$location_description)))
104 + 53 + 48 + 45 + 25
runApp()
names(df)
df %>% nrow()
df %>% select(arrest == "True") %>%nrow()
table(df$arrest)
table(df$arrest == TRUE)
df %>% select(arrest == TRUE) %>%nrow()
df %>% filter(arrest == TRUE) %>%nrow()
table(df$domestic)
table(df$primary_type, df$domestic)
runApp()
table(df$primary_type, df$arrest)
runApp()
df %>% filter(crime_type == 1, arrest = T, domestic = T)
df %>% filter(crime_type == 1, arrest == T, domestic == T)
df %>% filter(crime_type == 1, arrest == T, domestic == T) %>% select(primary_type)
df %>% filter(crime_type == 1, arrest == T, domestic == T) %>% select(primary_type) %>% as.character()
df %>% filter(crime_type == 1, arrest == T, domestic == T)
runApp()
runApp()
df[df$crime_type == 1, 'primary_typw']
df[df$crime_type == 1, 'primary_type']
str_to_sentence(unique(df[df$crime_type == 1, 'primary_type']))
df %>% filter(crime_type == 1) %>% select(primary_type) %>% unique() %>% str_to_sentence()
runApp()
df %>% filter(!is.na(latitude), crime_type == 1) %>% group_by(arrest)
df %>% filter(!is.na(latitude), crime_type == 1) %>% group_by(arrest) %>% summarise(n = n())
df %>% filter(!is.na(latitude), crime_type == 1) %>% group_by(arrest) %>% summarise(n = n()) %>% plot_ly(x=~ arrest, y =~ n, type = 'bar')
df %>% filter(!is.na(latitude), crime_type == 1) %>% group_by(arrest) %>% summarise(n = n()) %>% mutate(arrest = ifelse(T,"Yes","No")) %>% plot_ly(x=~ arrest, y =~ n, type = 'bar')
df %>% filter(!is.na(latitude), crime_type == 1) %>% group_by(arrest) %>% summarise(n = n()) %>% mutate(arrest = ifelse(isTRUE(arrest),"Yes","No")) %>% plot_ly(x=~ arrest, y =~ n, type = 'bar')
df %>% filter(!is.na(latitude), crime_type == 1) %>% group_by(arrest) %>% summarise(n = n()) %>% mutate(arrest = ifelse(arrest == T,"Yes","No")) %>% plot_ly(x=~ arrest, y =~ n, type = 'bar')
runApp()
df %>% filter(!is.na(latitude), crime_type == 1) %>% group_by(arrest) %>% summarise(n = n()) %>% mutate(arrest = ifelse(arrest == T,"Yes","No")) %>% plot_ly(x=~ arrest, y =~ n, type = 'bar', orientation = 'h')
df %>% filter(!is.na(latitude), crime_type == 1) %>% group_by(arrest) %>% summarise(n = n()) %>% mutate(arrest = ifelse(arrest == T,"Yes","No")) %>% plot_ly(x=~ n, y =~ arrest, type = 'bar', orientation = 'h')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
crime = df %>% filter(!is.na(latitude), crime_type == 1)
crime
crime = df %>% filter(!is.na(latitude), crime_type == 1)
crime %>% group_by(district) %>% summarise(n = n())
crime %>% group_by(district) %>% summarise(n = n()) %>% quantile()
crime %>% group_by(district) %>% summarise(n = n()) %>% quantile(n)
t = crime %>% group_by(district) %>% summarise(n = n())
quantile(t$n)
table(df$crime_type)
for(i in 1:6) { }
for(i in 1:6) { crime = df %>% filter(!is.na(latitude), crime_type == i)
t = crime %>% group_by(district) %>% summarise(n = n())
print(quantile(t$n))}
for(i in 1:6) { crime = df %>% filter(!is.na(latitude), crime_type == i)
t = crime %>% group_by(district) %>% summarise(n = n())
print(cut(t$n))}
for(i in 1:6) { crime = df %>% filter(!is.na(latitude), crime_type == i)
t = crime %>% group_by(district) %>% summarise(n = n())
print(cut(t$n, breaks = 4))}
sh_distr(readOGR(dsn = 'C:/Users/lgoye/OneDrive/Documents/GitHub/project2_lgoyenec/app/data_shp'))
sh_distr = readOGR(dsn = 'C:/Users/lgoye/OneDrive/Documents/GitHub/project2_lgoyenec/app/data_shp')
crime
crime =
#crimeInput() %>%
df %>%
filter(crime_type == 1) %>%
group_by(district) %>%
summarise(n = n()) %>%
rename(dist_num = district)
map = sh_distr
map@data = merge(map@data, crime, id = "dist_num")
View(map@data)
map = sh_distr
sh_distr@data
sh_distr = readOGR(dsn = 'C:/Users/lgoye/OneDrive/Documents/GitHub/project2_lgoyenec/app/data_shp', layer = 'police_district')
crime =
#crimeInput() %>%
df %>%
filter(crime_type == 1) %>%
group_by(district) %>%
summarise(n = n()) %>%
rename(dist_num = district)
map = sh_distr
map@data = merge(map@data, crime, id = "dist_num")
map@data
crime =
#crimeInput() %>%
df %>%
filter(crime_type == 5) %>%
group_by(district) %>%
summarise(n = n()) %>%
rename(dist_num = district)
map = sh_distr
map@data = merge(map@data, crime, id = "dist_num")
map@data
crime =
#crimeInput() %>%
df %>%
filter(crime_type == 1) %>%
group_by(district) %>%
summarise(n = n()) %>%
rename(dist_num = district)
map = sh_distr
map@data = merge(map@data, crime, id = "dist_num")
map@data
unique(map@data$n)
length(unique(map@data$n))
dom = map$n
bin = unique(dom)
pal = colorBin("Reds", domain = dom, bins = bin, na.color = "#FFFDFC")
leaflet(map) %>%
setView(lng = -87.70, lat = 41.82, zoom = 10) %>%
addTiles() %>%
addPolygons(stroke = T, smoothFactor = 0.2, fillOpacity = 0.7, fillColor =~ pal(dom), color = "white", weight = 0.3) %>%
addLegend(title = "",
pal = pal, values =~ n, na.label = "")
bin = sort(unique(dom))
bin
pal = colorBin("Reds", domain = dom, bins = bin, na.color = "#FFFDFC")
leaflet(map) %>%
setView(lng = -87.70, lat = 41.82, zoom = 10) %>%
addTiles() %>%
addPolygons(stroke = T, smoothFactor = 0.2, fillOpacity = 0.7, fillColor =~ pal(dom), color = "white", weight = 0.3) %>%
addLegend(title = "",
pal = pal, values =~ n, na.label = "")
crime =
#crimeInput() %>%
df %>%
filter(crime_type == 4) %>%
group_by(district) %>%
summarise(n = n()) %>%
rename(dist_num = district)
map = sh_distr
map@data = merge(map@data, crime, id = "dist_num")
map@data
dom = map$n
bin = sort(unique(dom))
pal = colorBin("Reds", domain = dom, bins = bin, na.color = "#FFFDFC")
leaflet(map) %>%
setView(lng = -87.70, lat = 41.82, zoom = 10) %>%
addTiles() %>%
addPolygons(stroke = T, smoothFactor = 0.2, fillOpacity = 0.7, fillColor =~ pal(dom), color = "white", weight = 0.3) %>%
addLegend(title = "",
pal = pal, values =~ n, na.label = "")
leaflet(map) %>%
addPolygons(stroke = T,
smoothFactor = 0.2,
fillOpacity = 0.7,
fillColor =~ pal(dom),
color = "white",
weight = 0.3)
leaflet(map) %>%
addPolygons(stroke = T,
smoothFactor = 0.2,
fillOpacity = 0.7,
fillColor =~ pal(dom),
color = "white",
weight = 0.3,
popup =~ n)
leaflet(map) %>%
addPolygons(stroke = T,
smoothFactor = 0.2,
fillOpacity = 0.7,
fillColor =~ pal(dom),
color = "white",
weight = 0.3,
popup =~ paste("Number of crimes:",n))
runApp()
runApp()
runApp()
runApp()
crime
crime %>% rename(a = dist_num)
crime %>% rename(dist_num = a)
crime %>% dplyr::rename(a = dist_num)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
crime
crime = df %>% filter(!is.na(latitude), crime_type == 1)
length(unique(crime$district))
crime = df %>% filter(!is.na(latitude), crime_type == 1) %>% group_by(district) %>% dplyr::summarise(n = n())
crime
length(unique(crime$n))
runApp()
c = c(1,2)
c
c[-1]
c[-1:]
c[-1:,]
rev(c)
runApp()
pal  = colorBin(rev(cPal), domain = dom, bins = bin, na.color = 'transparent')
cPal = c('#005B5B','#007979','#009797','#17AEAE',
'#2EB6B6','#45BEBE','#5CC6C6','#73CECE',
'#8BD6D6','#A2DEDE',
'#B9E6E6','#D0EEEE','#E7F6F6')
pal  = colorBin(rev(cPal), domain = dom, bins = bin, na.color = 'transparent')
pal[1]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("shinythemes")
install.packages("shinythemes")
runApp()
# Install library directly
library("shinythemes")
library()
# City of Chicago
# Import data API
# The API allows us to query maximum 1,000 crimes
# The following dataset have the 1,000 most recent crimes in Chicago
url  = 'https://data.cityofchicago.org/resource/w98m-zvie.json'
runApp('~/GitHub/project1_lgoyenec/app')
runApp()
